name: Pull Request Checks

# Trigger the workflow on push or pull request (only main branch).
on:
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  lint:
    name: Linting with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Pull all PR commits
        run: |
          # Un-shallow refs.
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          # Deepen topic branch; checkout topic branch.
          git fetch origin ${{ github.ref }}:${{ github.head_ref }} \
            --depth=$(( ${{ github.event.pull_request.commits }} + 1 ))
          git checkout ${{ github.event.pull_request.head.ref }}
          # Fetch main for common origin.
          git fetch origin main:main --depth=100
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          cache: 'pip'
          python-version: 3.12
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: >
            --from-ref "$(git merge-base main HEAD)"
            --to-ref "${{ github.head_ref }}"

  # TODO(@daskol): We need rework this stage: pre-build images, build StarPU
  # in-tree, rework layout and defaults, etc.
  build:
    name: Build and test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest']
        python-version: ['3.12']
    container:
      image: ubuntu:24.04
    steps:
      - name: Cache system packages
        id: cache-apt
        uses: actions/cache@v3
        env:
          cache-name: cache-apt-packages
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
            ${{ runner.os }}-build-
            ${{ runner.os }}
      - name: Install system dependencies
        run: |
          rm -rfv /etc/apt/apt.conf.d/docker*
          apt update
          apt install -y --no-install-recommends \
              autoconf automake binutils build-essential ca-certificates \
              clang cmake curl fxt-tools gdb git lcov libfxt-dev libhwloc-dev \
              libopenblas-dev libopenmpi-dev libopenmpi3 libtool-bin \
              lsb-release ninja-build openmpi-bin pkg-config
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build StarPU
        run: |
          export STARPU_VERSION=starpu-1.3.11
          export STARPU_LABEL=$STARPU_VERSION
          mkdir -p /usr/src
          curl -SL https://gitlab.inria.fr/starpu/starpu/-/archive/$STARPU_LABEL/starpu-$STARPU_LABEL.tar.gz | tar -xzC /usr/src
          ln -s /usr/src/starpu-$STARPU_LABEL /usr/src/starpu
          cd /usr/src/starpu
          ./autogen.sh
          ./configure \
              --disable-build-doc \
              --disable-build-examples \
              --disable-build-tests \
              --disable-fortran \
              --disable-opencl \
              --disable-socl \
              --disable-starpufft \
              --disable-starpupy \
              --enable-blas-lib=none \
              --enable-maxcudadev=8 \
              --enable-maxbuffers=16 \
              --with-fxt
          make -j 4 install
          rm -rf /usr/src/starpu /usr/src/starpu-$STARPU_LABEL && \
          echo '/usr/local/lib' > /etc/ld.so.conf.d/nntile.conf && \
          ldconfig
      - name: Build NNTile native libraries.
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithInfo -DUSE_CUDA=OFF
          cmake --build build
      - name: Install python dependencies
        run: |
          # Symlink native extension first.
          ln -s \
            build/wrappers/python/nntile_code.so \
            wrappers/python/nntile/nntile_code.so
          cd wrappers/python
          python -m pip install .[dev]
