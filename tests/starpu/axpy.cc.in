/*! @copyright (c) 2022-present Skolkovo Institute of Science and Technology
 *                              (Skoltech), Russia. All rights reserved.
 *                 2023-present Artificial Intelligence Research Institute
 *                              (AIRI), Russia. All rights reserved.
 *
 * NNTile is software framework for fast training of big neural networks on
 * distributed-memory heterogeneous systems based on StarPU runtime system.
 *
 * @file tests/starpu/axpy.cc.in
 * AXPY operation for StarPU buffers
 *
 * @version 1.1.0
 * */

#include "nntile/starpu/axpy.hh"
#include "../testing.hh"
#include <vector>
#include <stdexcept>
#include <iostream>

#ifdef NNTILE_USE_CBLAS
#   include <@CBLAS_H_NAME@>
#   ifndef CBLAS_INT
#       define CBLAS_INT @CBLAS_INT_TYPE@
#   endif // CBLAS_INT
#endif // NNTILE_USE_CBLAS

#ifdef NNTILE_USE_CUDA
#   include <cublas_v2.h>
#endif // NNTILE_USE_CUDA

using namespace nntile;
using namespace nntile::starpu;

#ifdef NNTILE_USE_CBLAS
// Overloaded call to CBLAS AXPY
static inline
void cblas_axpy(CBLAS_INT N, fp32_t alpha, const fp32_t *X, CBLAS_INT incX,
        fp32_t *Y, CBLAS_INT incY)
    noexcept
{
    cblas_saxpy(N, (float)alpha, (float *)X, incX, (float *)Y, incY);
}

// Overloaded call to CBLAS AXPY
static inline
void cblas_axpy(CBLAS_INT N, fp64_t alpha, const fp64_t *X, CBLAS_INT incX,
        fp64_t *Y, CBLAS_INT incY)
    noexcept
{
    cblas_daxpy(N, (double)alpha, (double *)X, incX, (double *)Y, incY);
}

template<typename T>
void validate_cpu(Index nelems, T alpha)
{
    using Y = typename T::repr_t;
    // Init all the data
    std::vector<T> src(nelems), dst(nelems);
    for(Index i = 0; i < nelems; ++i)
    {
        src[i] = Y(i+1);
        dst[i] = Y(-i-1);
    }
    // Create copy of dst
    std::vector<T> dst2(dst);
    // Launch low-level kernel
    std::cout << "Run cblas_axpy<" << T::type_repr << ">\n";
    cblas_axpy(nelems, alpha, &src[0], 1, &dst[0], 1);
    // Check by actually submitting a task
    VariableHandle src_handle(&src[0], sizeof(T)*nelems, STARPU_R),
        dst2_handle(&dst2[0], sizeof(T)*nelems, STARPU_RW),
        alpha_handle(&alpha, sizeof(T), STARPU_R);
    axpy::restrict_where(STARPU_CPU);
    std::cout << "Run starpu::axpy::submit<" << T::type_repr << "> restricted to CPU\n";
    axpy::submit<T>(alpha_handle, nelems, src_handle, dst2_handle);
    starpu_task_wait_for_all();
    dst2_handle.unregister();
    // Check result
    for(Index i = 0; i < nelems; ++i)
    {
        TEST_ASSERT(Y(dst[i]) == Y(dst2[i]));
    }
    std::cout << "OK: starpu::axpy::submit<" << T::type_repr << "> restricted to CPU\n";
}

template<typename T>
void validate_cpu_many()
{
    using Y = typename T::repr_t;
    T alpha[5]{T(Y(0)), T(Y(1)), T(Y(-1)), T(Y(2)), T(Y(-2))};
    for(T a: alpha)
    {
        validate_cpu<T>(1, a);
        validate_cpu<T>(100, a);
        validate_cpu<T>(10000, a);
        validate_cpu<T>(1000000, a);
    }
}
#endif // NNTILE_USE_CBLAS

#ifdef NNTILE_USE_CUDA
// Overloaded call to cuBLAS AXPY
static inline
void cublas_axpy(cublasHandle_t handle, int N, fp32_t alpha, const fp32_t *X,
        int incX, fp32_t *Y, int incY)
    noexcept
{
    cublasSaxpy(handle, N, (float *)&alpha, (float *)X, incX, (float *)Y, incY);
}

// Overloaded call to cuBLAS AXPY
static inline
void cublas_axpy(cublasHandle_t handle, int N, fp64_t alpha, const fp64_t *X,
        int incX, fp64_t *Y, int incY)
    noexcept
{
    cublasDaxpy(handle, N, (double *)&alpha, (double *)X, incX, (double *)Y, incY);
}

template<typename T>
void validate_cuda(Index nelems, T alpha)
{
    using Y = typename T::repr_t;
    // Get a StarPU CUDA worker (to perform computations on the same device)
    int cuda_worker_id = starpu_worker_get_by_type(STARPU_CUDA_WORKER, 0);
    // Choose worker CUDA device
    int dev_id = starpu_worker_get_devid(cuda_worker_id);
    cudaError_t cuda_err = cudaSetDevice(dev_id);
    TEST_ASSERT(cuda_err == cudaSuccess);
    // cuBLAS handle
    cublasHandle_t cublas;
    cublasStatus_t cublas_err = cublasCreate(&cublas);
    TEST_ASSERT(cublas_err == CUBLAS_STATUS_SUCCESS);
    // Create CUDA stream and make cuBLAS use it
    cudaStream_t stream;
    cuda_err = cudaStreamCreate(&stream);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cublas_err = cublasSetStream(cublas, stream);
    TEST_ASSERT(cublas_err == CUBLAS_STATUS_SUCCESS);
    // Init all the data
    std::vector<T> src(nelems), dst(nelems);
    for(Index i = 0; i < nelems; ++i)
    {
        src[i] = Y(i+1);
        dst[i] = Y(-i-1);
    }
    // Create copy of dst
    std::vector<T> dst2(dst);
    // Launch low-level kernel
    T *dev_src, *dev_dst;
    cuda_err = cudaMalloc(&dev_src, sizeof(T)*nelems);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cuda_err = cudaMalloc(&dev_dst, sizeof(T)*nelems);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cuda_err = cudaMemcpy(dev_src, &src[0], sizeof(T)*nelems,
            cudaMemcpyHostToDevice);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cuda_err = cudaMemcpy(dev_dst, &dst[0], sizeof(T)*nelems,
            cudaMemcpyHostToDevice);
    TEST_ASSERT(cuda_err == cudaSuccess);
    std::cout << "Run cublas_axpy<" << T::type_repr << ">\n";
    cublasSetPointerMode(cublas, CUBLAS_POINTER_MODE_HOST);
    cublas_axpy(cublas, nelems, alpha, dev_src, 1, dev_dst, 1);
    // Wait for result and destroy cublas handle and stream
    cuda_err = cudaStreamSynchronize(stream);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cublas_err = cublasDestroy(cublas);
    TEST_ASSERT(cublas_err == CUBLAS_STATUS_SUCCESS)
    cuda_err = cudaStreamDestroy(stream);
    TEST_ASSERT(cuda_err == cudaSuccess);
    // Copy result back to CPU
    cuda_err = cudaMemcpy(&dst[0], dev_dst, sizeof(T)*nelems,
            cudaMemcpyDeviceToHost);
    TEST_ASSERT(cuda_err == cudaSuccess);
    // Deallocate CUDA memory
    cuda_err = cudaFree(dev_src);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cuda_err = cudaFree(dev_dst);
    TEST_ASSERT(cuda_err == cudaSuccess);
    // Check by actually submitting a task
    VariableHandle src_handle(&src[0], sizeof(T)*nelems, STARPU_R),
        dst2_handle(&dst2[0], sizeof(T)*nelems, STARPU_RW),
        alpha_handle(&alpha, sizeof(T), STARPU_R);
    axpy::restrict_where(STARPU_CUDA);
    std::cout << "Run starpu::axpy::submit<" << T::type_repr << "> restricted to CUDA\n";
    axpy::submit<T>(alpha_handle, nelems, src_handle, dst2_handle);
    starpu_task_wait_for_all();
    dst2_handle.unregister();
    // Check result
    for(Index i = 0; i < nelems; ++i)
    {
        TEST_ASSERT(Y(dst[i]) == Y(dst2[i]));
    }
    std::cout << "OK: starpu::axpy::submit<" << T::type_repr << "> restricted to CUDA\n";
}

template<typename T>
void validate_cuda_many()
{
    using Y = typename T::repr_t;
    T alpha[5]{T(Y(0)), T(Y(1)), T(Y(-1)), T(Y(2)), T(Y(-2))};
    for(T a: alpha)
    {
        validate_cuda<T>(1, a);
        validate_cuda<T>(100, a);
        validate_cuda<T>(10000, a);
        validate_cuda<T>(1000000, a);
    }
}
#endif // NNTILE_USE_CBLAS

int main(int argc, char **argv)
{
    // Init StarPU for testing
    Config starpu(1, 1, 1);
    // Init codelet
    axpy::init();
    // Launch all tests
#ifdef NNTILE_USE_CBLAS
    validate_cpu_many<fp32_t>();
    validate_cpu_many<fp64_t>();
#endif // NNTILE_USE_CBLAS
#ifdef NNTILE_USE_CUDA
    validate_cuda_many<fp32_t>();
    validate_cuda_many<fp64_t>();
#endif // NNTILE_USE_CUDA
    return 0;
}
