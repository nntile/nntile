/*! @copyright (c) 2022-present Skolkovo Institute of Science and Technology
 *                              (Skoltech), Russia. All rights reserved.
 *                 2023-present Artificial Intelligence Research Institute
 *                              (AIRI), Russia. All rights reserved.
 *
 * NNTile is software framework for fast training of big neural networks on
 * distributed-memory heterogeneous systems based on StarPU runtime system.
 *
 * @file tests/starpu/nrm2.cc.in
 * NRM2 operation for StarPU buffers
 *
 * @version 1.1.0
 * */

#include "nntile/starpu/nrm2.hh"
#include "../testing.hh"
#include <vector>
#include <stdexcept>
#include <iostream>

#ifdef NNTILE_USE_CBLAS
#   include <@CBLAS_H_NAME@>
#   ifndef CBLAS_INT
#       define CBLAS_INT @CBLAS_INT_TYPE@
#   endif // CBLAS_INT
#endif // NNTILE_USE_CBLAS

#ifdef NNTILE_USE_CUDA
#   include <cublas_v2.h>
#endif // NNTILE_USE_CUDA

using namespace nntile;
using namespace nntile::starpu;

#ifdef NNTILE_USE_CBLAS
// Overloaded call to CBLAS NRM2
static inline
void cblas_nrm2(CBLAS_INT N, const fp32_t *X, CBLAS_INT incX, fp32_t *Y)
    noexcept
{
    *(float *)Y = cblas_snrm2(N, (float *)X, incX);
}

// Overloaded call to CBLAS NRM2
static inline
void cblas_nrm2(CBLAS_INT N, const fp64_t *X, CBLAS_INT incX, fp64_t *Y)
    noexcept
{
    *(double *)Y = cblas_dnrm2(N, (double *)X, incX);
}

template<typename T>
void validate_cpu(Index nelems)
{
    using Y = typename T::repr_t;
    // Init all the data
    std::vector<T> src(nelems), norm(1);
    for(Index i = 0; i < nelems; ++i)
    {
        src[i] = Y(i+1);
    }
    // Create copy of norm
    std::vector<T> norm2(norm);
    // Launch low-level kernel
    std::cout << "Run cblas_nrm2<" << T::type_repr << ">\n";
    cblas_nrm2(nelems, &src[0], 1, &norm[0]);
    // Check by actually submitting a task
    VariableHandle src_handle(&src[0], sizeof(T)*nelems, STARPU_R),
        norm2_handle(&norm2[0], sizeof(T), STARPU_RW);
    nrm2::restrict_where(STARPU_CPU);
    std::cout << "Run starpu::nrm2::submit<" << T::type_repr << "> restricted to CPU\n";
    nrm2::submit<T>(nelems, src_handle, norm2_handle);
    starpu_task_wait_for_all();
    norm2_handle.unregister();
    // Check result
    TEST_ASSERT(Y(norm[0]) == Y(norm2[0]));
    std::cout << "OK: starpu::nrm2::submit<" << T::type_repr << "> restricted to CPU\n";
}

template<typename T>
void validate_cpu_many()
{
    validate_cpu<T>(1);
    validate_cpu<T>(100);
    validate_cpu<T>(10000);
    validate_cpu<T>(1000000);
}
#endif // NNTILE_USE_CBLAS

#ifdef NNTILE_USE_CUDA
// Overloaded call to cuBLAS NRM2
static inline
void cublas_nrm2(cublasHandle_t handle, int N, const fp32_t *X, int incX,
        fp32_t *Y)
    noexcept
{
    cublasSnrm2(handle, N, (float *)X, incX, (float *)Y);
}

// Overloaded call to cuBLAS NRM2
static inline
void cublas_nrm2(cublasHandle_t handle, int N, const fp64_t *X, int incX,
        fp64_t *Y)
    noexcept
{
    cublasDnrm2(handle, N, (double *)X, incX, (double *)Y);
}

template<typename T>
void validate_cuda(Index nelems)
{
    using Y = typename T::repr_t;
    // Get a StarPU CUDA worker (to perform computations on the same device)
    int cuda_worker_id = starpu_worker_get_by_type(STARPU_CUDA_WORKER, 0);
    // Choose worker CUDA device
    int dev_id = starpu_worker_get_devid(cuda_worker_id);
    cudaError_t cuda_err = cudaSetDevice(dev_id);
    TEST_ASSERT(cuda_err == cudaSuccess);
    // cuBLAS handle
    cublasHandle_t cublas;
    cublasStatus_t cublas_err = cublasCreate(&cublas);
    TEST_ASSERT(cublas_err == CUBLAS_STATUS_SUCCESS);
    // Create CUDA stream and make cuBLAS use it
    cudaStream_t stream;
    cuda_err = cudaStreamCreate(&stream);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cublas_err = cublasSetStream(cublas, stream);
    TEST_ASSERT(cublas_err == CUBLAS_STATUS_SUCCESS);
    // Init all the data
    std::vector<T> src(nelems), norm(1);
    for(Index i = 0; i < nelems; ++i)
    {
        src[i] = Y(i+1);
    }
    // Create copy of dst
    std::vector<T> norm2(norm);
    // Launch low-level kernel
    T *dev_src, *dev_norm;
    cuda_err = cudaMalloc(&dev_src, sizeof(T)*nelems);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cuda_err = cudaMemcpy(dev_src, &src[0], sizeof(T)*nelems,
            cudaMemcpyHostToDevice);
    TEST_ASSERT(cuda_err == cudaSuccess);
    std::cout << "Run cublas_nrm2<" << T::type_repr << ">\n";
    cublasSetPointerMode(cublas, CUBLAS_POINTER_MODE_HOST);
    cublas_nrm2(cublas, nelems, dev_src, 1, &norm[0]);
    // Wait for result and destroy cublas handle and stream
    cuda_err = cudaStreamSynchronize(stream);
    TEST_ASSERT(cuda_err == cudaSuccess);
    cublas_err = cublasDestroy(cublas);
    TEST_ASSERT(cublas_err == CUBLAS_STATUS_SUCCESS)
    cuda_err = cudaStreamDestroy(stream);
    TEST_ASSERT(cuda_err == cudaSuccess);
    // Deallocate CUDA memory
    cuda_err = cudaFree(dev_src);
    TEST_ASSERT(cuda_err == cudaSuccess);
    // Check by actually submitting a task
    VariableHandle src_handle(&src[0], sizeof(T)*nelems, STARPU_R),
        norm2_handle(&norm2[0], sizeof(T), STARPU_RW);
    nrm2::restrict_where(STARPU_CUDA);
    std::cout << "Run starpu::nrm2::submit<" << T::type_repr << "> restricted to CUDA\n";
    nrm2::submit<T>(nelems, src_handle, norm2_handle);
    starpu_task_wait_for_all();
    norm2_handle.unregister();
    // Check result
    TEST_ASSERT(Y(norm[0]) == Y(norm2[0]));
    std::cout << "OK: starpu::nrm2::submit<" << T::type_repr << "> restricted to CUDA\n";
}

template<typename T>
void validate_cuda_many()
{
    validate_cuda<T>(1);
    validate_cuda<T>(100);
    validate_cuda<T>(10000);
    validate_cuda<T>(1000000);
}
#endif // NNTILE_USE_CBLAS

int main(int argc, char **argv)
{
    // Init StarPU for testing
    Config starpu(1, 1, 1);
    // Init codelet
    nrm2::init();
    // Launch all tests
#ifdef NNTILE_USE_CBLAS
    validate_cpu_many<fp32_t>();
    validate_cpu_many<fp64_t>();
#endif // NNTILE_USE_CBLAS
#ifdef NNTILE_USE_CUDA
    validate_cuda_many<fp32_t>();
    validate_cuda_many<fp64_t>();
#endif // NNTILE_USE_CUDA
    return 0;
}
