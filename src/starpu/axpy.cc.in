/*! @copyright (c) 2022-present Skolkovo Institute of Science and Technology
 *                              (Skoltech), Russia. All rights reserved.
 *                 2023-present Artificial Intelligence Research Institute
 *                              (AIRI), Russia. All rights reserved.
 *
 * NNTile is software framework for fast training of big neural networks on
 * distributed-memory heterogeneous systems based on StarPU runtime system.
 *
 * @file src/starpu/axpy.cc.in
 * AXPY operation for StarPU buffers
 *
 * @version 1.1.0
 * */

#include "nntile/starpu/axpy.hh"
#include "nntile/kernel/cpu.hh"
#include "nntile/kernel/cuda.hh"

#ifndef STARPU_SIMGRID
#   ifdef NNTILE_USE_CBLAS
#       include <@CBLAS_H_NAME@>
#       ifndef CBLAS_INT
#           define CBLAS_INT @CBLAS_INT_TYPE@
#       endif // CBLAS_INT
#   endif // NNTILE_USE_CBLAS

#   ifdef NNTILE_USE_CUDA
#       include <cublas_v2.h>
#       include <starpu_cublas_v2.h>
#   endif // NNTILE_USE_CUDA
#endif // STARPU_SIMGRID

namespace nntile::starpu::axpy
{

#ifdef NNTILE_USE_CBLAS
#ifndef STARPU_SIMGRID
// Overloaded call to CBLAS GEMM
static inline
void cblas(CBLAS_INT N, float alpha, const fp32_t *X, CBLAS_INT incX,
        fp32_t *Y, CBLAS_INT incY)
    noexcept
{
    cblas_saxpy(N, alpha, (const float *)X, incX, (float *)Y, incY);
}

// Overloaded call to CBLAS GEMM
static inline
void cblas(CBLAS_INT N, double alpha, const fp64_t *X, CBLAS_INT incX,
        fp64_t *Y, CBLAS_INT incY)
    noexcept
{
    cblas_daxpy(N, alpha, (const double *)X, incX, (double *)Y, incY);
}
#endif // STARPU_SIMGRID

//! AXPY for contiguous matrices without padding through StarPU buffers
template<typename T>
void cpu_tensor_alpha(void *buffers[], void *cl_args)
    noexcept
{
#ifndef STARPU_SIMGRID // Run the code only if this is not a simulation
    // Get arguments
    Index nelems = reinterpret_cast<Index *>(cl_args)[0];
    // Get interfaces
    auto interfaces = reinterpret_cast<VariableInterface **>(buffers);
    using Y = typename nntile::kernel::CPUComputeType<T>::value;
    const Y *alpha = interfaces[0]->get_ptr<Y>();
    const T *src = interfaces[1]->get_ptr<T>();
    T *dst = interfaces[2]->get_ptr<T>();
    // Call corresponding CBLAS routine
    cblas(nelems, alpha[0], src, 1, dst, 1);
#endif // STARPU_SIMGRID
}

//! AXPY for contiguous matrices without padding through StarPU buffers
template<typename T>
void cpu_scalar_alpha(void *buffers[], void *cl_args)
    noexcept
{
#ifndef STARPU_SIMGRID // Run the code only if this is not a simulation
    // Get arguments
    auto args = reinterpret_cast<args2_t *>(cl_args);
    // Get interfaces
    auto interfaces = reinterpret_cast<VariableInterface **>(buffers);
    const T *src = interfaces[0]->get_ptr<T>();
    T *dst = interfaces[1]->get_ptr<T>();
    // Call corresponding CBLAS routine
    cblas(args->nelems, args->alpha, src, 1, dst, 1);
#endif // STARPU_SIMGRID
}
#endif // NNTILE_USE_CBLAS

#ifdef NNTILE_USE_CUDA
#ifndef STARPU_SIMGRID
// Overloaded call to cuBLAS AXPY
static inline
void cublas(cublasHandle_t handle, int N, const float *alpha, const fp32_t *X,
        int incX, fp32_t *Y, int incY)
    noexcept
{
    cublasSaxpy(handle, N, alpha, (const float *)X, incX, (float *)Y, incY);
}

// Overloaded call to cuBLAS AXPY
static inline
void cublas(cublasHandle_t handle, int N, const double *alpha, const fp64_t *X,
        int incX, fp64_t *Y, int incY)
    noexcept
{
    cublasDaxpy(handle, N, alpha, (const double *)X, incX, (double *)Y, incY);
}
#endif // STARPU_SIMGRID

//! AXPY for contiguous matrices without padding through StarPU buffers
template<typename T>
void cuda(void *buffers[], void *cl_args)
    noexcept
{
#ifndef STARPU_SIMGRID // Run the code only if this is not a simulation
    // Get arguments
    Index nelems = reinterpret_cast<Index *>(cl_args)[0];
    // Get interfaces
    auto interfaces = reinterpret_cast<VariableInterface **>(buffers);
    using Y = typename nntile::kernel::CUDAComputeType<T>::value;
    const Y *alpha = interfaces[0]->get_ptr<Y>();
    const T *src = interfaces[1]->get_ptr<T>();
    T *dst = interfaces[2]->get_ptr<T>();
    // Get cuBLAS handle and CUDA stream
    cublasHandle_t handle = starpu_cublas_get_local_handle();
    cudaStream_t stream = starpu_cuda_get_local_stream();
    cublasSetStream(handle, stream);
    cublasSetPointerMode(handle, CUBLAS_POINTER_MODE_DEVICE);
    // Call corresponding cuBLAS routine
    cublas(handle, nelems, alpha, src, 1, dst, 1);
#endif // STARPU_SIMGRID
}

//! AXPY for contiguous matrices without padding through StarPU buffers
template<typename T>
void cuda2(void *buffers[], void *cl_args)
    noexcept
{
#ifndef STARPU_SIMGRID // Run the code only if this is not a simulation
    // Get arguments
    auto args = reinterpret_cast<args2_t *>(cl_args);
    // Get interfaces
    auto interfaces = reinterpret_cast<VariableInterface **>(buffers);
    using Y = typename nntile::kernel::CUDAComputeType<T>::value;
    const T *src = interfaces[0]->get_ptr<T>();
    T *dst = interfaces[1]->get_ptr<T>();
    Y alpha_{args->alpha};
    // Get cuBLAS handle and CUDA stream
    cublasHandle_t handle = starpu_cublas_get_local_handle();
    cudaStream_t stream = starpu_cuda_get_local_stream();
    cublasSetStream(handle, stream);
    cublasSetPointerMode(handle, CUBLAS_POINTER_MODE_HOST);
    // Call corresponding cuBLAS routine
    cublas(handle, args->nelems, &alpha_, src, 1, dst, 1);
#endif // STARPU_SIMGRID
}
#endif //NNTILE_USE_CUDA

Codelet codelet_tensor_alpha_fp32, codelet_tensor_alpha_fp64;
Codelet codelet_scalar_alpha_fp32, codelet_scalar_alpha_fp64, codelet_scalar_alpha_fp32_fast_tf32;

void init()
{
    codelet_tensor_alpha_fp32.init("nntile_axpy_tensor_alpha_fp32",
            nullptr,
#ifdef NNTILE_USE_CBLAS
            {cpu_tensor_alpha<fp32_t>},
#else // NNTILE_USE_CBLAS
            {},
#endif // NNTILE_USE_CBLAS
#ifdef NNTILE_USE_CUDA
            {cuda<fp32_t>}
#else // NNTILE_USE_CUDA
            {}
#endif // NNTILE_USE_CUDA
            );
    codelet_tensor_alpha_fp64.init("nntile_axpy_tensor_alpha_fp64",
            nullptr,
#ifdef NNTILE_USE_CBLAS
            {cpu_tensor_alpha<fp64_t>},
#else // NNTILE_USE_CBLAS
            {},
#endif // NNTILE_USE_CBLAS
#ifdef NNTILE_USE_CUDA
            {cuda<fp64_t>}
#else // NNTILE_USE_CUDA
            {}
#endif // NNTILE_USE_CUDA
            );
    codelet_scalar_alpha_fp32.init("nntile_axpy_scalar_alpha_fp32",
            nullptr,
#ifdef NNTILE_USE_CBLAS
            {cpu_scalar_alpha<fp32_t>},
#else // NNTILE_USE_CBLAS
            {},
#endif // NNTILE_USE_CBLAS
#ifdef NNTILE_USE_CUDA
            {cuda2<fp32_t>}
#else // NNTILE_USE_CUDA
            {}
#endif // NNTILE_USE_CUDA
            );

    codelet_scalar_alpha_fp32_fast_tf32.init("nntile_axpy_scalar_alpha_fp32_fast_tf32",
            nullptr,
#ifdef NNTILE_USE_CBLAS
            {cpu_scalar_alpha<fp32_t>},
#else // NNTILE_USE_CBLAS
            {},
#endif // NNTILE_USE_CBLAS
#ifdef NNTILE_USE_CUDA
            {cuda2<fp32_t>}
#else // NNTILE_USE_CUDA
            {}
#endif // NNTILE_USE_CUDA
            );

    codelet_scalar_alpha_fp64.init("nntile_axpy_scalar_alpha_fp64",
            nullptr,
#ifdef NNTILE_USE_CBLAS
            {cpu_scalar_alpha<fp64_t>},
#else // NNTILE_USE_CBLAS
            {},
#endif // NNTILE_USE_CBLAS
#ifdef NNTILE_USE_CUDA
            {cuda2<fp64_t>}
#else // NNTILE_USE_CUDA
            {}
#endif // NNTILE_USE_CUDA
            );
}

void restrict_where(uint32_t where)
{
    codelet_tensor_alpha_fp32.restrict_where(where);
    codelet_tensor_alpha_fp64.restrict_where(where);
    codelet_scalar_alpha_fp32.restrict_where(where);
    codelet_scalar_alpha_fp32_fast_tf32.restrict_where(where);
    codelet_scalar_alpha_fp64.restrict_where(where);
}

void restore_where()
{
    codelet_tensor_alpha_fp32.restore_where();
    codelet_tensor_alpha_fp64.restore_where();
    codelet_scalar_alpha_fp32.restore_where();
    codelet_scalar_alpha_fp32_fast_tf32.restore_where();
    codelet_scalar_alpha_fp64.restore_where();
}

template<typename T>
void submit(Handle alpha, Index nelems, Handle src, Handle dst)
{
    // Check that matrix sizes fit proper types for underlying CBLAS
#ifdef NNTILE_USE_CBLAS
#ifndef STARPU_SIMGRID
    if(static_cast<CBLAS_INT>(nelems) != nelems)
    {
        throw std::runtime_error("AXPY size N does not fit CBLAS_INT");
    }
#endif // STARPU_SIMGRID
#endif // NNTILE_USE_CBLAS
    // Check that matrix sizes fit proper types for underlying CUBLAS
#ifdef NNTILE_USE_CUDA
#ifndef STARPU_SIMGRID
    if(static_cast<int>(nelems) != nelems)
    {
        throw std::runtime_error("AXPY size N does not fit int");
    }
#endif // STARPU_SIMGRID
#endif // NNTILE_USE_CUDA
    // Codelet arguments
    Index *nelems_ = new Index{nelems};
    // Submit task
    int ret = starpu_task_insert(codelet_tensor_alpha<T>(),
            STARPU_R, static_cast<starpu_data_handle_t>(alpha),
            STARPU_R, static_cast<starpu_data_handle_t>(src),
            STARPU_RW, static_cast<starpu_data_handle_t>(dst),
            STARPU_CL_ARGS, nelems_, sizeof(*nelems_),
            //STARPU_FLOPS, nflops,
            0);
    // Check submission
    if(ret != 0)
    {
        throw std::runtime_error("Error in axpy task submission");
    }
}

// Explicit instantiation
template
void submit<fp32_t>(Handle alpha, Index nelems, Handle src, Handle dst);

template
void submit<fp64_t>(Handle alpha, Index nelems, Handle src, Handle dst);

template<typename T>
void submit(Scalar alpha, Index nelems, Handle src, Handle dst)
{
    // Check that matrix sizes fit proper types for underlying CBLAS
#ifdef NNTILE_USE_CBLAS
#ifndef STARPU_SIMGRID
    if(static_cast<CBLAS_INT>(nelems) != nelems)
    {
        throw std::runtime_error("AXPY size N does not fit CBLAS_INT");
    }
#endif // STARPU_SIMGRID
#endif // NNTILE_USE_CBLAS
    // Check that matrix sizes fit proper types for underlying CUBLAS
#ifdef NNTILE_USE_CUDA
#ifndef STARPU_SIMGRID
    if(static_cast<int>(nelems) != nelems)
    {
        throw std::runtime_error("AXPY size N does not fit int");
    }
#endif // STARPU_SIMGRID
#endif // NNTILE_USE_CUDA
    // Codelet arguments
    auto cl_args = new args2_t{nelems, alpha};
    // Submit task
    int ret = starpu_task_insert(codelet_scalar_alpha<T>(),
            STARPU_R, static_cast<starpu_data_handle_t>(src),
            STARPU_RW, static_cast<starpu_data_handle_t>(dst),
            STARPU_CL_ARGS, cl_args, sizeof(*cl_args),
            //STARPU_FLOPS, nflops,
            0);
    // Check submission
    if(ret != 0)
    {
        throw std::runtime_error("Error in axpy2 task submission");
    }
}

// Explicit instantiation
template
void submit<fp32_t>(Scalar alpha, Index nelems, Handle src, Handle dst);

template
void submit<fp32_fast_tf32_t>(Scalar alpha, Index nelems, Handle src, Handle dst);

template
void submit<fp64_t>(Scalar alpha, Index nelems, Handle src, Handle dst);

} // namespace nntile::starpu::axpy
