/*! @copyright (c) 2022-present Skolkovo Institute of Science and Technology
 *                              (Skoltech), Russia. All rights reserved.
 *                 2023-present Artificial Intelligence Research Institute
 *                              (AIRI), Russia. All rights reserved.
 *
 * NNTile is software framework for fast training of big neural networks on
 * distributed-memory heterogeneous systems based on StarPU runtime system.
 *
 * @file src/starpu/scal_inplace.cc.in
 * Inplace scal operation for StarPU buffers
 *
 * @version 1.1.0
 * */

// Corresponding header
#include "nntile/starpu/scal_inplace.hh"

// Standard libraries
#include <cstdlib>
#include <stdexcept>

// Other NNTile headers

// Include CBLAS
#ifndef STARPU_SIMGRID
#   ifdef NNTILE_USE_CBLAS
#       include <@CBLAS_H_NAME@>
#       ifndef CBLAS_INT
#           define CBLAS_INT @CBLAS_INT_TYPE@
#       endif // CBLAS_INT
#   endif // NNTILE_USE_CBLAS
// Include CUBLAS
#   ifdef NNTILE_USE_CUDA
#       include <cublas_v2.h>
#       include <starpu_cublas_v2.h>
#   endif // NNTILE_USE_CUDA
#endif // STARPU_SIMGRID

namespace nntile::starpu
{

#ifdef NNTILE_USE_CBLAS
#ifndef STARPU_SIMGRID
// Overloaded call to CBLAS scal
static inline
void cblas(CBLAS_INT N, float alpha, fp32_t *X, CBLAS_INT incX)
    noexcept
{
    cblas_sscal(N, alpha, (float *)X, incX);
}

// Overloaded call to CBLAS scal
static inline
void cblas(CBLAS_INT N, double alpha, fp64_t *X, CBLAS_INT incX)
    noexcept
{
    cblas_dscal(N, alpha, (double *)X, incX);
}
#endif // STARPU_SIMGRID

//! Constructor
template<typename T>
ScalInplace<std::tuple<T>>::ScalInplace():
    codelet("nntile_scal_inplace", footprint, cpu_funcs, cuda_funcs)
{
}

//! StarPU wrapper for kernel::scal_inplace::cpu<T>
template<typename T>
void ScalInplace<std::tuple<T>>::cpu(void *buffers[], void *cl_args)
    noexcept
{
#ifndef STARPU_SIMGRID // Run the code only if this is not a simulation
    // Get arguments
    auto args = reinterpret_cast<args_t *>(cl_args);
    // Get interfaces
    auto interfaces = reinterpret_cast<VariableInterface **>(buffers);
    T *X = interfaces[0]->get_ptr<T>();
    // Call corresponding CBLAS routine
    cblas(args->nelems, args->alpha, X, 1);
#endif // STARPU_SIMGRID
}
#endif // NNTILE_USE_CBLAS

// Specializations of CPU wrapper for accelerated types
template<>
void ScalInplace<std::tuple<fp32_fast_tf32_t>>::cpu(void *buffers[], void *cl_args)
    noexcept
{
    // Fall back to FP32
    ScalInplace<std::tuple<fp32_t>>::cpu(buffers, cl_args);
}

template<>
void ScalInplace<std::tuple<fp32_fast_fp16_t>>::cpu(void *buffers[], void *cl_args)
    noexcept
{
    // Fall back to FP32
    ScalInplace<std::tuple<fp32_t>>::cpu(buffers, cl_args);
}

template<>
void ScalInplace<std::tuple<fp32_fast_bf16_t>>::cpu(void *buffers[], void *cl_args)
    noexcept
{
    // Fall back to FP32
    ScalInplace<std::tuple<fp32_t>>::cpu(buffers, cl_args);
}

#ifdef NNTILE_USE_CUDA
#ifndef STARPU_SIMGRID
// Overloaded call to cuBLAS scal
static inline
void cublas(cublasHandle_t handle, int N, float alpha, fp32_t *X, int incX)
    noexcept
{
    cublasSscal(handle, N, &alpha, (float *)X, incX);
}

// Overloaded call to cuBLAS scal
static inline
void cublas(cublasHandle_t handle, int N, double alpha, fp64_t *X, int incX)
    noexcept
{
    cublasDscal(handle, N, &alpha, (double *)X, incX);
}

#endif // STARPU_SIMGRID

//! StarPU wrapper for kernel::scal_inplace::cuda<T>
template<typename T>
void ScalInplace<std::tuple<T>>::cuda(void *buffers[], void *cl_args)
    noexcept
{
#ifndef STARPU_SIMGRID // Run the code only if this is not a simulation
    // Get arguments
    auto args = reinterpret_cast<args_t *>(cl_args);
    // Get interfaces
    auto interfaces = reinterpret_cast<VariableInterface **>(buffers);
    T *X = interfaces[0]->get_ptr<T>();
    // Get cuBLAS handle and CUDA stream
    cublasHandle_t handle = starpu_cublas_get_local_handle();
    cudaStream_t stream = starpu_cuda_get_local_stream();
    cublasSetStream(handle, stream);
    // alpha and beta parameters of GEMM operation are on CPU host
    cublasSetPointerMode(handle, CUBLAS_POINTER_MODE_HOST);
    // Call corresponding cuBLAS routine
    cublas(handle, args->nelems, args->alpha, X, 1);
#endif // STARPU_SIMGRID
}

// Specializations of CPU wrapper for accelerated types
template<>
void ScalInplace<std::tuple<fp32_fast_tf32_t>>::cuda(void *buffers[], void *cl_args)
    noexcept
{
    // Fall back to FP32
    ScalInplace<std::tuple<fp32_t>>::cuda(buffers, cl_args);
}

template<>
void ScalInplace<std::tuple<fp32_fast_fp16_t>>::cuda(void *buffers[], void *cl_args)
    noexcept
{
    // Fall back to FP32
    ScalInplace<std::tuple<fp32_t>>::cuda(buffers, cl_args);
}

template<>
void ScalInplace<std::tuple<fp32_fast_bf16_t>>::cuda(void *buffers[], void *cl_args)
    noexcept
{
    // Fall back to FP32
    ScalInplace<std::tuple<fp32_t>>::cuda(buffers, cl_args);
}
#endif //NNTILE_USE_CUDA

template<typename T>
void ScalInplace<std::tuple<T>>::submit(Index nelems, Scalar alpha, Handle data)
{
    // Check that matrix sizes fit proper types for underlying CBLAS
#ifdef NNTILE_USE_CBLAS
#ifndef STARPU_SIMGRID
    if(static_cast<CBLAS_INT>(nelems) != nelems)
    {
        throw std::runtime_error("scal_inplace size N does not fit CBLAS_INT");
    }
#endif // STARPU_SIMGRID
#endif // NNTILE_USE_CBLAS
    // Check that matrix sizes fit proper types for underlying CUBLAS
#ifdef NNTILE_USE_CUDA
#ifndef STARPU_SIMGRID
    if(static_cast<int>(nelems) != nelems)
    {
        throw std::runtime_error("CBLAS size N does not fit int");
    }
#endif // STARPU_SIMGRID
#endif // NNTILE_USE_CUDA
    // Codelet arguments
    args_t *cl_args = (args_t *)malloc(sizeof(*cl_args));
    cl_args->nelems = nelems;
    cl_args->alpha = alpha;
    // Submit task
    int ret = starpu_task_insert(&codelet,
            STARPU_RW, data.get(),
            STARPU_CL_ARGS, cl_args, sizeof(*cl_args),
            //STARPU_FLOPS, nflops,
            0);
    // Check submission
    if(ret != 0)
    {
        throw std::runtime_error("Error in scal_inplace task submission");
    }
}

//! Pack of add operations for different types
scal_inplace_pack_t scal_inplace;

} // namespace nntile::starpu
