import sys
from typing import Protocol, Sequence, overload

if sys.version_info >= (3, 12):
    from collections.abc import Buffer
else:
    from typing_extensions import Buffer

from .. import TransOp
from ..tile import Tile, TileTraits

class TensorTraits(TileTraits):
    def __init__(self, shape: Sequence[int],
                 basetile_shape: Sequence[int]) -> None: ...

    @property
    def basetile_shape(self) -> list[int]: ...
    @property
    def grid(self) -> TileTraits: ...

    def get_tile_shape(self, tile_index: Sequence[int]) -> list[int]: ...
    def get_grid_shape(self) -> list[int]: ...

class Tensor(Protocol):
    def __init__(self, traits: TensorTraits, distribution: Sequence[int],
                 last_tag: int): ...

    @property
    def distribution(self) -> list[int]: ...
    @property
    def next_tag(self) -> int: ...

    def from_array(self, array: Buffer) -> None: ...
    def to_array(self, array: Buffer) -> None: ...

    def get_tile(self, linear_offset: int) -> Tile: ...
    def print_scalar_async(self) -> None: ...

    def set_reduction_add(self) -> None: ...
    def set_reduction_hypot(self) -> None: ...
    def set_reduction_maxsumexp(self) -> None: ...

    def invalidate_submit(self) -> None: ...
    def unregister(self) -> None: ...
    def wont_use(self) -> None: ...

def tensor_from_array(tensor: Tensor, array: Buffer): ...
def tensor_to_array(tensor: Tensor, array: Buffer): ...

class Tensor_bf16(Tensor, TensorTraits): ...
class Tensor_bool(Tensor, TensorTraits): ...
class Tensor_fp32(Tensor, TensorTraits): ...
class Tensor_fp32_fast_tf32(Tensor, TensorTraits): ...
class Tensor_fp64(Tensor, TensorTraits): ...
class Tensor_int64(Tensor, TensorTraits): ...

# NOTE Recommended linw width is 130 according to stubs style guide but we
# stick to 80 everywhere except the rest of this file since it is much easier
# to follow and read long definitions in groups.
#
# https://typing.readthedocs.io/en/latest/reference/stubs.html#style-guide
#
# ruff: noqa: E501

def adam_step_async_bf16(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_bf16, first_moment: Tensor_bf16, second_moment: Tensor_bf16, p: Tensor_bf16) -> None: ...
def adam_step_async_fp32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32, first_moment: Tensor_fp32, second_moment: Tensor_fp32, p: Tensor_fp32) -> None: ...
def adam_step_async_fp32_fast_tf32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32_fast_tf32, first_moment: Tensor_fp32_fast_tf32, second_moment: Tensor_fp32_fast_tf32, p: Tensor_fp32_fast_tf32) -> None: ...
def adam_step_async_fp64(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp64, first_moment: Tensor_fp64, second_moment: Tensor_fp64, p: Tensor_fp64) -> None: ...
def adam_step_bf16(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_bf16, first_moment: Tensor_bf16, second_moment: Tensor_bf16, p: Tensor_bf16) -> None: ...
def adam_step_fp32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32, first_moment: Tensor_fp32, second_moment: Tensor_fp32, p: Tensor_fp32) -> None: ...
def adam_step_fp32_fast_tf32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32_fast_tf32, first_moment: Tensor_fp32_fast_tf32, second_moment: Tensor_fp32_fast_tf32, p: Tensor_fp32_fast_tf32) -> None: ...
def adam_step_fp64(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp64, first_moment: Tensor_fp64, second_moment: Tensor_fp64, p: Tensor_fp64) -> None: ...

def adamw_step_async_bf16(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_bf16, first_moment: Tensor_bf16, second_moment: Tensor_bf16, p: Tensor_bf16) -> None: ...
def adamw_step_async_fp32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32, first_moment: Tensor_fp32, second_moment: Tensor_fp32, p: Tensor_fp32) -> None: ...
def adamw_step_async_fp32_fast_tf32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32_fast_tf32, first_moment: Tensor_fp32_fast_tf32, second_moment: Tensor_fp32_fast_tf32, p: Tensor_fp32_fast_tf32) -> None: ...
def adamw_step_async_fp64(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp64, first_moment: Tensor_fp64, second_moment: Tensor_fp64, p: Tensor_fp64) -> None: ...
def adamw_step_bf16(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_bf16, first_moment: Tensor_bf16, second_moment: Tensor_bf16, p: Tensor_bf16) -> None: ...
def adamw_step_fp32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32, first_moment: Tensor_fp32, second_moment: Tensor_fp32, p: Tensor_fp32) -> None: ...
def adamw_step_fp32_fast_tf32(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp32_fast_tf32, first_moment: Tensor_fp32_fast_tf32, second_moment: Tensor_fp32_fast_tf32, p: Tensor_fp32_fast_tf32) -> None: ...
def adamw_step_fp64(num_iter: int, beta_1: float, beta_2: float, eps: float, lr: float, weight_decay: float, grad: Tensor_fp64, first_moment: Tensor_fp64, second_moment: Tensor_fp64, p: Tensor_fp64) -> None: ...

def add_async_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16) -> None: ...
def add_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32) -> None: ...
def add_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32) -> None: ...
def add_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64) -> None: ...
def add_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16) -> None: ...
def add_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32) -> None: ...
def add_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32) -> None: ...
def add_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64) -> None: ...

def add_fiber_async_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, batch_ndim: int) -> None: ...
def add_fiber_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, batch_ndim: int) -> None: ...
def add_fiber_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, batch_ndim: int) -> None: ...
def add_fiber_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, batch_ndim: int) -> None: ...
def add_fiber_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, batch_ndim: int) -> None: ...
def add_fiber_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, batch_ndim: int) -> None: ...
def add_fiber_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, batch_ndim: int) -> None: ...
def add_fiber_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, batch_ndim: int) -> None: ...

def add_scalar_async_fp32(alpha: float, beta: float, dst: Tensor_fp32) -> None: ...
def add_scalar_async_fp64(alpha: float, beta: float, dst: Tensor_fp64) -> None: ...
def add_scalar_fp32(alpha: float, beta: float, dst: Tensor_fp32) -> None: ...
def add_scalar_fp64(alpha: float, beta: float, dst: Tensor_fp64) -> None: ...

def add_slice3_async_bf16(alpha: float, src1: Tensor_bf16, beta: float, src2: Tensor_bf16, dst: Tensor_bf16, axis: int) -> None: ...
def add_slice3_async_fp32(alpha: float, src1: Tensor_fp32, beta: float, src2: Tensor_fp32, dst: Tensor_fp32, axis: int) -> None: ...
def add_slice3_async_fp64(alpha: float, src1: Tensor_fp64, beta: float, src2: Tensor_fp64, dst: Tensor_fp64, axis: int) -> None: ...
def add_slice3_bf16(alpha: float, src1: Tensor_bf16, beta: float, src2: Tensor_bf16, dst: Tensor_bf16, axis: int) -> None: ...
def add_slice3_fp32(alpha: float, src1: Tensor_fp32, beta: float, src2: Tensor_fp32, dst: Tensor_fp32, axis: int) -> None: ...
def add_slice3_fp32_fast_tf32(alpha: float, src1: Tensor_fp32_fast_tf32, beta: float, src2: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def add_slice3_fp64(alpha: float, src1: Tensor_fp64, beta: float, src2: Tensor_fp64, dst: Tensor_fp64, axis: int) -> None: ...

def add_slice_async_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int) -> None: ...
def add_slice_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int) -> None: ...
def add_slice_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def add_slice_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int) -> None: ...
def add_slice_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int) -> None: ...
def add_slice_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int) -> None: ...
def add_slice_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def add_slice_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int) -> None: ...

def addcdiv_async_bf16(val: float, eps: float, nom: Tensor_bf16, denom: Tensor_bf16, src: Tensor_bf16) -> None: ...
def addcdiv_async_fp32(val: float, eps: float, nom: Tensor_fp32, denom: Tensor_fp32, src: Tensor_fp32) -> None: ...
def addcdiv_async_fp32_fast_tf32(val: float, eps: float, nom: Tensor_fp32_fast_tf32, denom: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32) -> None: ...
def addcdiv_async_fp64(val: float, eps: float, nom: Tensor_fp64, denom: Tensor_fp64, src: Tensor_fp64) -> None: ...
def addcdiv_bf16(val: float, eps: float, nom: Tensor_bf16, denom: Tensor_bf16, src: Tensor_bf16) -> None: ...
def addcdiv_fp32(val: float, eps: float, nom: Tensor_fp32, denom: Tensor_fp32, src: Tensor_fp32) -> None: ...
def addcdiv_fp32_fast_tf32(val: float, eps: float, nom: Tensor_fp32_fast_tf32, denom: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32) -> None: ...
def addcdiv_fp64(val: float, eps: float, nom: Tensor_fp64, denom: Tensor_fp64, src: Tensor_fp64) -> None: ...

@overload
def axpy_async_fp32(alpha: Tensor_fp32, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
@overload
def axpy_async_fp32(alpha: float, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
@overload
def axpy_async_fp32_fast_tf32(alpha: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
@overload
def axpy_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
@overload
def axpy_async_fp64(alpha: Tensor_fp64, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
@overload
def axpy_async_fp64(alpha: float, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
@overload
def axpy_fp32(alpha: Tensor_fp32, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
@overload
def axpy_fp32(alpha: float, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
@overload
def axpy_fp32_fast_tf32(alpha: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
@overload
def axpy_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
@overload
def axpy_fp64(alpha: Tensor_fp64, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
@overload
def axpy_fp64(alpha: float, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def clear_async_bf16(dst: Tensor_bf16) -> None: ...
def clear_async_fp32(dst: Tensor_fp32) -> None: ...
def clear_async_fp32_fast_tf32(dst: Tensor_fp32_fast_tf32) -> None: ...
def clear_async_fp64(dst: Tensor_fp64) -> None: ...
def clear_bf16(dst: Tensor_bf16) -> None: ...
def clear_fp32(dst: Tensor_fp32) -> None: ...
def clear_fp32_fast_tf32(dst: Tensor_fp32_fast_tf32) -> None: ...
def clear_fp64(dst: Tensor_fp64) -> None: ...

def copy_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def copy_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def copy_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def copy_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def copy_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def copy_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def copy_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def copy_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def copy_intersection_async_bool(src: Tensor_bool, src_offset: Sequence[int], dst: Tensor_bool, dst_offset: Sequence[int]) -> None: ...
def copy_intersection_async_fp32(src: Tensor_fp32, src_offset: Sequence[int], dst: Tensor_fp32, dst_offset: Sequence[int]) -> None: ...
def copy_intersection_async_fp64(src: Tensor_fp64, src_offset: Sequence[int], dst: Tensor_fp64, dst_offset: Sequence[int]) -> None: ...
def copy_intersection_bool(src: Tensor_fp32, src_offset: Sequence[int], dst: Tensor_fp32, dst_offset: Sequence[int]) -> None: ...
def copy_intersection_fp32(src: Tensor_fp32, src_offset: Sequence[int], dst: Tensor_fp32, dst_offset: Sequence[int]) -> None: ...
def copy_intersection_fp64(src: Tensor_fp64, src_offset: Sequence[int], dst: Tensor_fp64, dst_offset: Sequence[int]) -> None: ...

def dgelu_async_fp32(A: Tensor_fp32) -> None: ...
def dgelu_async_fp64(A: Tensor_fp64) -> None: ...
def dgelu_fp32(A: Tensor_fp32) -> None: ...
def dgelu_fp64(A: Tensor_fp64) -> None: ...

def dgelutanh_async_fp32(A: Tensor_fp32) -> None: ...
def dgelutanh_async_fp64(A: Tensor_fp64) -> None: ...
def dgelutanh_fp32(A: Tensor_fp32) -> None: ...
def dgelutanh_fp64(A: Tensor_fp64) -> None: ...

def drelu_async_fp32(A: Tensor_fp32) -> None: ...
def drelu_async_fp64(A: Tensor_fp64) -> None: ...
def drelu_fp32(A: Tensor_fp32) -> None: ...
def drelu_fp64(A: Tensor_fp64) -> None: ...

def embedding_async_bf16(index: Tensor_int64, vocab: Tensor_bf16, embed: Tensor_bf16, axis: int) -> None: ...
def embedding_async_fp32(index: Tensor_int64, vocab: Tensor_fp32, embed: Tensor_fp32, axis: int) -> None: ...
def embedding_async_fp32_fast_tf32(index: Tensor_int64, vocab: Tensor_fp32_fast_tf32, embed: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def embedding_async_fp64(index: Tensor_int64, vocab: Tensor_fp64, embed: Tensor_fp64, axis: int) -> None: ...
def embedding_bf16(index: Tensor_int64, vocab: Tensor_bf16, embed: Tensor_bf16, axis: int) -> None: ...
def embedding_fp32(index: Tensor_int64, vocab: Tensor_fp32, embed: Tensor_fp32, axis: int) -> None: ...
def embedding_fp32_fast_tf32(index: Tensor_int64, vocab: Tensor_fp32_fast_tf32, embed: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def embedding_fp64(index: Tensor_int64, vocab: Tensor_fp64, embed: Tensor_fp64, axis: int) -> None: ...

def embedding_backward_async_bf16(index: Tensor_int64, embed: Tensor_bf16, vocab: Tensor_bf16, axis: int, redux: int) -> None: ...
def embedding_backward_async_fp32(index: Tensor_int64, embed: Tensor_fp32, vocab: Tensor_fp32, axis: int, redux: int) -> None: ...
def embedding_backward_async_fp32_fast_tf32(index: Tensor_int64, embed: Tensor_fp32_fast_tf32, vocab: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def embedding_backward_async_fp64(index: Tensor_int64, embed: Tensor_fp64, vocab: Tensor_fp64, axis: int, redux: int) -> None: ...
def embedding_backward_bf16(index: Tensor_int64, embed: Tensor_bf16, vocab: Tensor_bf16, axis: int, redux: int) -> None: ...
def embedding_backward_fp32(index: Tensor_int64, embed: Tensor_fp32, vocab: Tensor_fp32, axis: int, redux: int) -> None: ...
def embedding_backward_fp32_fast_tf32(index: Tensor_int64, embed: Tensor_fp32_fast_tf32, vocab: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def embedding_backward_fp64(index: Tensor_int64, embed: Tensor_fp64, vocab: Tensor_fp64, axis: int, redux: int) -> None: ...

def fill_async_bf16(val: float, A: Tensor_bf16) -> None: ...
def fill_async_fp32(val: float, A: Tensor_fp32) -> None: ...
def fill_async_fp32_fast_tf32(val: float, A: Tensor_fp32_fast_tf32) -> None: ...
def fill_async_fp64(val: float, A: Tensor_fp64) -> None: ...
def fill_bf16(val: float, A: Tensor_bf16) -> None: ...
def fill_fp32(val: float, A: Tensor_fp32) -> None: ...
def fill_fp32_fast_tf32(val: float, A: Tensor_fp32_fast_tf32) -> None: ...
def fill_fp64(val: float, A: Tensor_fp64) -> None: ...

def flash_maxsumexp_async_bf16(Q: Tensor_bf16, K: Tensor_bf16, mask: Tensor_bool, maxsumexp: Tensor_bf16, tmp: Tensor_bf16, redux: int) -> None: ...
def flash_maxsumexp_async_fp32(Q: Tensor_fp32, K: Tensor_fp32, mask: Tensor_bool, maxsumexp: Tensor_fp32, tmp: Tensor_fp32, redux: int) -> None: ...
def flash_maxsumexp_async_fp32_fast_tf32(Q: Tensor_fp32_fast_tf32, K: Tensor_fp32_fast_tf32, mask: Tensor_bool, maxsumexp: Tensor_fp32_fast_tf32, tmp: Tensor_fp32_fast_tf32, redux: int) -> None: ...
def flash_maxsumexp_async_fp64(Q: Tensor_fp64, K: Tensor_fp64, mask: Tensor_bool, maxsumexp: Tensor_fp64, tmp: Tensor_fp64, redux: int) -> None: ...
def flash_maxsumexp_bf16(Q: Tensor_bf16, K: Tensor_bf16, mask: Tensor_bool, maxsumexp: Tensor_bf16, tmp: Tensor_bf16, redux: int) -> None: ...
def flash_maxsumexp_fp32(Q: Tensor_fp32, K: Tensor_fp32, mask: Tensor_bool, maxsumexp: Tensor_fp32, tmp: Tensor_fp32, redux: int) -> None: ...
def flash_maxsumexp_fp32_fast_tf32(Q: Tensor_fp32_fast_tf32, K: Tensor_fp32_fast_tf32, mask: Tensor_bool, maxsumexp: Tensor_fp32_fast_tf32, tmp: Tensor_fp32_fast_tf32, redux: int) -> None: ...
def flash_maxsumexp_fp64(Q: Tensor_fp64, K: Tensor_fp64, mask: Tensor_bool, maxsumexp: Tensor_fp64, tmp: Tensor_fp64, redux: int) -> None: ...

def flash_softmax_gemm_async_bf16(Q: Tensor_bf16, K: Tensor_bf16, V: Tensor_bf16, mask: Tensor_bool, maxsumexp: Tensor_bf16, dst: Tensor_bf16, tmp: Tensor_bf16, redux: int) -> None: ...
def flash_softmax_gemm_async_fp32(Q: Tensor_fp32, K: Tensor_fp32, V: Tensor_fp32, mask: Tensor_bool, maxsumexp: Tensor_fp32, dst: Tensor_fp32, tmp: Tensor_fp32, redux: int) -> None: ...
def flash_softmax_gemm_async_fp32_fast_tf32(Q: Tensor_fp32_fast_tf32, K: Tensor_fp32_fast_tf32, V: Tensor_fp32_fast_tf32, mask: Tensor_bool, maxsumexp: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, tmp: Tensor_fp32_fast_tf32, redux: int) -> None: ...
def flash_softmax_gemm_async_fp64(Q: Tensor_fp64, K: Tensor_fp64, V: Tensor_fp64, mask: Tensor_bool, maxsumexp: Tensor_fp64, dst: Tensor_fp64, tmp: Tensor_fp64, redux: int) -> None: ...
def flash_softmax_gemm_bf16(Q: Tensor_bf16, K: Tensor_bf16, V: Tensor_bf16, mask: Tensor_bool, maxsumexp: Tensor_bf16, dst: Tensor_bf16, tmp: Tensor_bf16, redux: int) -> None: ...
def flash_softmax_gemm_fp32(Q: Tensor_fp32, K: Tensor_fp32, V: Tensor_fp32, mask: Tensor_bool, maxsumexp: Tensor_fp32, dst: Tensor_fp32, tmp: Tensor_fp32, redux: int) -> None: ...
def flash_softmax_gemm_fp32_fast_tf32(Q: Tensor_fp32_fast_tf32, K: Tensor_fp32_fast_tf32, V: Tensor_fp32_fast_tf32, mask: Tensor_bool, maxsumexp: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, tmp: Tensor_fp32_fast_tf32, redux: int) -> None: ...
def flash_softmax_gemm_fp64(Q: Tensor_fp64, K: Tensor_fp64, V: Tensor_fp64, mask: Tensor_bool, maxsumexp: Tensor_fp64, dst: Tensor_fp64, tmp: Tensor_fp64, redux: int) -> None: ...

def flash_softmax_gemm_backward_async_bf16(Q: Tensor_bf16, dQ: Tensor_bf16, K: Tensor_bf16, dK: Tensor_bf16, V: Tensor_bf16, dV: Tensor_bf16, mask: Tensor_bool, maxsumexp: Tensor_bf16, dst_grad: Tensor_bf16, tmp: Tensor_bf16, tmp_grad: Tensor_bf16, tmp_sumprod_slice: Tensor_bf16, redux: int) -> None: ...
def flash_softmax_gemm_backward_async_fp32(Q: Tensor_fp32, dQ: Tensor_fp32, K: Tensor_fp32, dK: Tensor_fp32, V: Tensor_fp32, dV: Tensor_fp32, mask: Tensor_bool, maxsumexp: Tensor_fp32, dst_grad: Tensor_fp32, tmp: Tensor_fp32, tmp_grad: Tensor_fp32, tmp_sumprod_slice: Tensor_fp32, redux: int) -> None: ...
def flash_softmax_gemm_backward_async_fp32_fast_tf32(Q: Tensor_fp32_fast_tf32, dQ: Tensor_fp32_fast_tf32, K: Tensor_fp32_fast_tf32, dK: Tensor_fp32_fast_tf32, V: Tensor_fp32_fast_tf32, dV: Tensor_fp32_fast_tf32, mask: Tensor_bool, maxsumexp: Tensor_fp32_fast_tf32, dst_grad: Tensor_fp32_fast_tf32, tmp: Tensor_fp32_fast_tf32, tmp_grad: Tensor_fp32_fast_tf32, tmp_sumprod_slice: Tensor_fp32_fast_tf32, redux: int) -> None: ...
def flash_softmax_gemm_backward_async_fp64(Q: Tensor_fp64, dQ: Tensor_fp64, K: Tensor_fp64, dK: Tensor_fp64, V: Tensor_fp64, dV: Tensor_fp64, mask: Tensor_bool, maxsumexp: Tensor_fp64, dst_grad: Tensor_fp64, tmp: Tensor_fp64, tmp_grad: Tensor_fp64, tmp_sumprod_slice: Tensor_fp64, redux: int) -> None: ...
def flash_softmax_gemm_backward_bf16(Q: Tensor_bf16, dQ: Tensor_bf16, K: Tensor_bf16, dK: Tensor_bf16, V: Tensor_bf16, dV: Tensor_bf16, mask: Tensor_bool, maxsumexp: Tensor_bf16, dst_grad: Tensor_bf16, tmp: Tensor_bf16, tmp_grad: Tensor_bf16, tmp_sumprod_slice: Tensor_bf16, redux: int) -> None: ...
def flash_softmax_gemm_backward_fp32(Q: Tensor_fp32, dQ: Tensor_fp32, K: Tensor_fp32, dK: Tensor_fp32, V: Tensor_fp32, dV: Tensor_fp32, mask: Tensor_bool, maxsumexp: Tensor_fp32, dst_grad: Tensor_fp32, tmp: Tensor_fp32, tmp_grad: Tensor_fp32, tmp_sumprod_slice: Tensor_fp32, redux: int) -> None: ...
def flash_softmax_gemm_backward_fp32_fast_tf32(Q: Tensor_fp32_fast_tf32, dQ: Tensor_fp32_fast_tf32, K: Tensor_fp32_fast_tf32, dK: Tensor_fp32_fast_tf32, V: Tensor_fp32_fast_tf32, dV: Tensor_fp32_fast_tf32, mask: Tensor_bool, maxsumexp: Tensor_fp32_fast_tf32, dst_grad: Tensor_fp32_fast_tf32, tmp: Tensor_fp32_fast_tf32, tmp_grad: Tensor_fp32_fast_tf32, tmp_sumprod_slice: Tensor_fp32_fast_tf32, redux: int) -> None: ...
def flash_softmax_gemm_backward_fp64(Q: Tensor_fp64, dQ: Tensor_fp64, K: Tensor_fp64, dK: Tensor_fp64, V: Tensor_fp64, dV: Tensor_fp64, mask: Tensor_bool, maxsumexp: Tensor_fp64, dst_grad: Tensor_fp64, tmp: Tensor_fp64, tmp_grad: Tensor_fp64, tmp_sumprod_slice: Tensor_fp64, redux: int) -> None: ...

def gather_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def gather_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def gather_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def gather_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def gather_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def gather_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def gelu_async_fp32(A: Tensor_fp32) -> None: ...
def gelu_async_fp64(A: Tensor_fp64) -> None: ...
def gelu_fp32(A: Tensor_fp32) -> None: ...
def gelu_fp64(A: Tensor_fp64) -> None: ...

def gelu_backward_async_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx) -> None: ...
def gelu_backward_async_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx) -> None: ...
def gelu_backward_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx) -> None: ...
def gelu_backward_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx) -> None: ...

def gelutanh_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def gelutanh_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def gelutanh_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def gelutanh_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def gelutanh_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def gelutanh_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def gelutanh_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def gelutanh_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def gelutanh_backward_async_bf16(x: Tensor_bf16, dy: Tensor_bf16, dx: Tensor_bf16) -> None: ...
def gelutanh_backward_async_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx: Tensor_fp32) -> None: ...
def gelutanh_backward_async_fp32_fast_tf32(x: Tensor_fp32_fast_tf32, dy: Tensor_fp32_fast_tf32, dx: Tensor_fp32_fast_tf32) -> None: ...
def gelutanh_backward_async_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx: Tensor_fp64) -> None: ...
def gelutanh_backward_bf16(x: Tensor_bf16, dy: Tensor_bf16, dx: Tensor_bf16) -> None: ...
def gelutanh_backward_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx: Tensor_fp32) -> None: ...
def gelutanh_backward_fp32_fast_tf32(x: Tensor_fp32_fast_tf32, dy: Tensor_fp32_fast_tf32, dx: Tensor_fp32_fast_tf32) -> None: ...
def gelutanh_backward_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx: Tensor_fp64) -> None: ...

def gelutanh_inplace_async_fp32(A: Tensor_fp32) -> None: ...
def gelutanh_inplace_async_fp64(A: Tensor_fp64) -> None: ...
def gelutanh_inplace_fp32(A: Tensor_fp32) -> None: ...
def gelutanh_inplace_fp64(A: Tensor_fp64) -> None: ...

def gemm_async_bf16(alpha: float, transA: TransOp, A: Tensor_bf16, transB: TransOp, B: Tensor_bf16, beta: float, C: Tensor_bf16, ndim: int, batch_ndim: int, redux: int) -> None: ...
def gemm_async_fp32(alpha: float, transA: TransOp, A: Tensor_fp32, transB: TransOp, B: Tensor_fp32, beta: float, C: Tensor_fp32, ndim: int, batch_ndim: int, redux: int) -> None: ...
def gemm_async_fp32_fast_tf32(alpha: float, transA: TransOp, A: Tensor_fp32_fast_tf32, transB: TransOp, B: Tensor_fp32_fast_tf32, beta: float, C: Tensor_fp32_fast_tf32, ndim: int, batch_ndim: int, redux: int) -> None: ...
def gemm_async_fp64(alpha: float, transA: TransOp, A: Tensor_fp64, transB: TransOp, B: Tensor_fp64, beta: float, C: Tensor_fp64, ndim: int, batch_ndim: int, redux: int) -> None: ...
def gemm_bf16(alpha: float, transA: TransOp, A: Tensor_bf16, transB: TransOp, B: Tensor_bf16, beta: float, C: Tensor_bf16, ndim: int, batch_ndim: int, redux: int) -> None: ...
def gemm_fp32(alpha: float, transA: TransOp, A: Tensor_fp32, transB: TransOp, B: Tensor_fp32, beta: float, C: Tensor_fp32, ndim: int, batch_ndim: int, redux: int) -> None: ...
def gemm_fp32_fast_tf32(alpha: float, transA: TransOp, A: Tensor_fp32_fast_tf32, transB: TransOp, B: Tensor_fp32_fast_tf32, beta: float, C: Tensor_fp32_fast_tf32, ndim: int, batch_ndim: int, redux: int) -> None: ...
def gemm_fp64(alpha: float, transA: TransOp, A: Tensor_fp64, transB: TransOp, B: Tensor_fp64, beta: float, C: Tensor_fp64, ndim: int, batch_ndim: int, redux: int) -> None: ...

def hypot_async_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16) -> None: ...
def hypot_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32) -> None: ...
def hypot_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32) -> None: ...
def hypot_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64) -> None: ...
def hypot_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16) -> None: ...
def hypot_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32) -> None: ...
def hypot_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64) -> None: ...

def hypot_scalar_inverse_async_bf16(eps: float, alpha: float, dst: Tensor_bf16) -> None: ...
def hypot_scalar_inverse_async_fp32(eps: float, alpha: float, dst: Tensor_fp32) -> None: ...
def hypot_scalar_inverse_async_fp32_fast_tf32(eps: float, alpha: float, dst: Tensor_fp32_fast_tf32) -> None: ...
def hypot_scalar_inverse_async_fp64(eps: float, alpha: float, dst: Tensor_fp64) -> None: ...
def hypot_scalar_inverse_bf16(eps: float, alpha: float, dst: Tensor_bf16) -> None: ...
def hypot_scalar_inverse_fp32(eps: float, alpha: float, dst: Tensor_fp32) -> None: ...
def hypot_scalar_inverse_fp32_fast_tf32(eps: float, alpha: float, dst: Tensor_fp32_fast_tf32) -> None: ...
def hypot_scalar_inverse_fp64(eps: float, alpha: float, dst: Tensor_fp64) -> None: ...

def logsumexp_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def logsumexp_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def logsumexp_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def logsumexp_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def logsumexp_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def logsumexp_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def logsumexp_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def logsumexp_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def mask_scalar_async_bf16(mask: Tensor_bool, val: float, A: Tensor_bf16, batch_ndim: int) -> None: ...
def mask_scalar_async_fp32(mask: Tensor_bool, val: float, A: Tensor_fp32, batch_ndim: int) -> None: ...
def mask_scalar_async_fp32_fast_tf32(mask: Tensor_bool, val: float, A: Tensor_fp32_fast_tf32, batch_ndim: int) -> None: ...
def mask_scalar_async_fp64(mask: Tensor_bool, val: float, A: Tensor_fp64, batch_ndim: int) -> None: ...
def mask_scalar_bf16(mask: Tensor_bool, val: float, A: Tensor_bf16, batch_ndim: int) -> None: ...
def mask_scalar_fp32(mask: Tensor_bool, val: float, A: Tensor_fp32, batch_ndim: int) -> None: ...
def mask_scalar_fp32_fast_tf32(mask: Tensor_bool, val: float, A: Tensor_fp32_fast_tf32, batch_ndim: int) -> None: ...
def mask_scalar_fp64(mask: Tensor_bool, val: float, A: Tensor_fp64, batch_ndim: int) -> None: ...

def maximum_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def maximum_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def maximum_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def maximum_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def maxsumexp_async_bf16(src: Tensor_bf16, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def maxsumexp_async_fp32(src: Tensor_fp32, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def maxsumexp_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def maxsumexp_async_fp64(src: Tensor_fp64, dst: Tensor_fp64, axis: int, redux: int) -> None: ...
def maxsumexp_bf16(src: Tensor_bf16, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def maxsumexp_fp32(src: Tensor_fp32, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def maxsumexp_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def maxsumexp_fp64(src: Tensor_fp64, dst: Tensor_fp64, axis: int, redux: int) -> None: ...

def norm_slice_async_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def norm_slice_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def norm_slice_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def norm_slice_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...
def norm_slice_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def norm_slice_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def norm_slice_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def norm_slice_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...

def normalize_async_fp32(gamma_beta: Tensor_fp32, src: Tensor_fp32, dst: Tensor_fp32, size: int, eps: float, axis: int) -> None: ...
def normalize_async_fp64(gamma_beta: Tensor_fp64, src: Tensor_fp64, dst: Tensor_fp64, size: int, eps: float, axis: int) -> None: ...
def normalize_fp32(gamma_beta: Tensor_fp32, src: Tensor_fp32, dst: Tensor_fp32, size: int, eps: float, axis: int) -> None: ...
def normalize_fp64(gamma_beta: Tensor_fp64, src: Tensor_fp64, dst: Tensor_fp64, size: int, eps: float, axis: int) -> None: ...

def nrm2_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, tmp: Tensor_fp32) -> None: ...
def nrm2_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, tmp: Tensor_fp64) -> None: ...
def nrm2_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, tmp: Tensor_fp32) -> None: ...
def nrm2_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, tmp: Tensor_fp64) -> None: ...

def pow_async_fp32(alpha: float, exp: float, A: Tensor_fp32) -> None: ...
def pow_async_fp64(alpha: float, exp: float, A: Tensor_fp64) -> None: ...
def pow_fp32(alpha: float, exp: float, A: Tensor_fp32) -> None: ...
def pow_fp64(alpha: float, exp: float, A: Tensor_fp64) -> None: ...

def prod_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def prod_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def prod_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def prod_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def prod_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def prod_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def prod_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def prod_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def prod_fiber3_async_bf16(src1: Tensor_bf16, alpha: float, src2: Tensor_bf16, dst: Tensor_bf16, axis: int) -> None: ...
def prod_fiber3_async_fp32(src1: Tensor_fp32, alpha: float, src2: Tensor_fp32, dst: Tensor_fp32, axis: int) -> None: ...
def prod_fiber3_async_fp32_fast_tf32(src1: Tensor_fp32_fast_tf32, alpha: float, src2: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def prod_fiber3_async_fp64(src1: Tensor_fp64, alpha: float, src2: Tensor_fp64, dst: Tensor_fp64, axis: int) -> None: ...
def prod_fiber3_bf16(src1: Tensor_bf16, alpha: float, src2: Tensor_bf16, dst: Tensor_bf16, axis: int) -> None: ...
def prod_fiber3_fp32(src1: Tensor_fp32, alpha: float, src2: Tensor_fp32, dst: Tensor_fp32, axis: int) -> None: ...
def prod_fiber3_fp32_fast_tf32(src1: Tensor_fp32_fast_tf32, alpha: float, src2: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def prod_fiber3_fp64(src1: Tensor_fp64, alpha: float, src2: Tensor_fp64, dst: Tensor_fp64, axis: int) -> None: ...

def prod_fiber_async_fp32(src: Tensor_fp32, alpha: float, dst: Tensor_fp32, axis: int) -> None: ...
def prod_fiber_async_fp64(src: Tensor_fp64, alpha: float, dst: Tensor_fp64, axis: int) -> None: ...
def prod_fiber_fp32(src: Tensor_fp32, alpha: float, dst: Tensor_fp32, axis: int) -> None: ...
def prod_fiber_fp64(src: Tensor_fp64, alpha: float, dst: Tensor_fp64, axis: int) -> None: ...

def prod_slice_async_bf16(src: Tensor_bf16, alpha: int, dst: Tensor_bf16, axis: int) -> None: ...
def prod_slice_async_fp32(src: Tensor_fp32, alpha: int, dst: Tensor_fp32, axis: int) -> None: ...
def prod_slice_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, alpha: int, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def prod_slice_async_fp64(src: Tensor_fp64, alpha: int, dst: Tensor_fp64, axis: int) -> None: ...
def prod_slice_bf16(src: Tensor_bf16, alpha: int, dst: Tensor_bf16, axis: int) -> None: ...
def prod_slice_fp32(src: Tensor_fp32, alpha: int, dst: Tensor_fp32, axis: int) -> None: ...
def prod_slice_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, alpha: int, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def prod_slice_fp64(src: Tensor_fp64, alpha: int, dst: Tensor_fp64, axis: int) -> None: ...

def randn_async_bf16(dst: Tensor_bf16, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...
def randn_async_fp32(dst: Tensor_fp32, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...
def randn_async_fp32_fast_tf32(dst: Tensor_fp32_fast_tf32, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...
def randn_async_fp64(dst: Tensor_fp64, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...
def randn_bf16(dst: Tensor_bf16, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...
def randn_fp32(dst: Tensor_fp32, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...
def randn_fp32_fast_tf32(dst: Tensor_fp32_fast_tf32, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...
def randn_fp64(dst: Tensor_fp64, start: Sequence[int], underlying_shape: Sequence[int], seed: int, mean: float, stddev: float) -> None: ...

def relu_async_fp32(A: Tensor_fp32) -> None: ...
def relu_async_fp32_fast_tf32(A: Tensor_fp32_fast_tf32) -> None: ...
def relu_async_fp64(A: Tensor_fp64) -> None: ...
def relu_fp32(A: Tensor_fp32) -> None: ...
def relu_fp32_fast_tf32(A: Tensor_fp32_fast_tf32) -> None: ...
def relu_fp64(A: Tensor_fp64) -> None: ...

def relu_backward_async_bf16(x: Tensor_bf16, dy: Tensor_bf16, dx: Tensor_bf16) -> None: ...
def relu_backward_async_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx: Tensor_fp32) -> None: ...
def relu_backward_async_fp32_fast_tf32(x: Tensor_fp32_fast_tf32, dy: Tensor_fp32_fast_tf32, dx: Tensor_fp32_fast_tf32) -> None: ...
def relu_backward_async_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx: Tensor_fp64) -> None: ...
def relu_backward_bf16(x: Tensor_bf16, dy: Tensor_bf16, dx: Tensor_bf16) -> None: ...
def relu_backward_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx: Tensor_fp32) -> None: ...
def relu_backward_fp32_fast_tf32(x: Tensor_fp32_fast_tf32, dy: Tensor_fp32_fast_tf32, dx: Tensor_fp32_fast_tf32) -> None: ...
def relu_backward_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx: Tensor_fp64) -> None: ...

def relu_forward_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def relu_forward_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def relu_forward_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def relu_forward_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def relu_forward_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def relu_forward_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def relu_forward_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def relu_forward_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def rope_async_bf16(sin: Tensor_bf16, cos: Tensor_bf16, src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def rope_async_fp32(sin: Tensor_fp32, cos: Tensor_fp32, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def rope_async_fp32_fast_tf32(sin: Tensor_fp32_fast_tf32, cos: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def rope_async_fp64(sin: Tensor_fp64, cos: Tensor_fp64, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def rope_bf16(sin: Tensor_bf16, cos: Tensor_bf16, src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def rope_fp32(sin: Tensor_fp32, cos: Tensor_fp32, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def rope_fp32_fast_tf32(sin: Tensor_fp32_fast_tf32, cos: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def rope_fp64(sin: Tensor_fp64, cos: Tensor_fp64, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def scal_async_bf16(alpha: float, src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def scal_async_fp32(alpha: float, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def scal_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def scal_async_fp64(alpha: float, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def scal_bf16(alpha: float, src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def scal_fp32(alpha: float, src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def scal_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def scal_fp64(alpha: float, src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def scal_inplace_async_fp32(alpha: float, data: Tensor_fp32) -> None: ...
def scal_inplace_async_fp32_fast_tf32(alpha: float, data: Tensor_fp32_fast_tf32) -> None: ...
def scal_inplace_async_fp64(alpha: float, data: Tensor_fp64) -> None: ...
def scal_inplace_fp32(alpha: float, data: Tensor_fp32) -> None: ...
def scal_inplace_fp32_fast_tf32(alpha: float, data: Tensor_fp32_fast_tf32) -> None: ...
def scal_inplace_fp64(alpha: float, data: Tensor_fp64) -> None: ...

def scatter_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def scatter_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def scatter_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def scatter_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def scatter_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def scatter_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def silu_backward_async_bf16(x: Tensor_bf16, dy: Tensor_bf16, dx: Tensor_bf16) -> None: ...
def silu_backward_async_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx: Tensor_fp32) -> None: ...
def silu_backward_async_fp32_fast_tf32(x: Tensor_fp32_fast_tf32, dy: Tensor_fp32_fast_tf32, dx: Tensor_fp32_fast_tf32) -> None: ...
def silu_backward_async_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx: Tensor_fp64) -> None: ...
def silu_backward_bf16(x: Tensor_bf16, dy: Tensor_bf16, dx: Tensor_bf16) -> None: ...
def silu_backward_fp32(x: Tensor_fp32, dy: Tensor_fp32, dx: Tensor_fp32) -> None: ...
def silu_backward_fp32_fast_tf32(x: Tensor_fp32_fast_tf32, dy: Tensor_fp32_fast_tf32, dx: Tensor_fp32_fast_tf32) -> None: ...
def silu_backward_fp64(x: Tensor_fp64, dy: Tensor_fp64, dx: Tensor_fp64) -> None: ...

def silu_forward_async_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def silu_forward_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def silu_forward_async_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def silu_forward_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def silu_forward_bf16(src: Tensor_bf16, dst: Tensor_bf16) -> None: ...
def silu_forward_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def silu_forward_fp32_fast_tf32(src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32) -> None: ...
def silu_forward_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...

def softmax_async_bf16(maxsumexp: Tensor_bf16, src: Tensor_bf16, alpha: float, dst: Tensor_bf16, axis: int) -> None: ...
def softmax_async_fp32(maxsumexp: Tensor_fp32, src: Tensor_fp32, alpha: float, dst: Tensor_fp32, axis: int) -> None: ...
def softmax_async_fp32_fast_tf32(maxsumexp: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, alpha: float, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def softmax_async_fp64(maxsumexp: Tensor_fp64, src: Tensor_fp64, alpha: float, dst: Tensor_fp64, axis: int) -> None: ...
def softmax_bf16(maxsumexp: Tensor_bf16, src: Tensor_bf16, alpha: float, dst: Tensor_bf16, axis: int) -> None: ...
def softmax_fp32(maxsumexp: Tensor_fp32, src: Tensor_fp32, alpha: float, dst: Tensor_fp32, axis: int) -> None: ...
def softmax_fp32_fast_tf32(maxsumexp: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, alpha: float, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def softmax_fp64(maxsumexp: Tensor_fp64, src: Tensor_fp64, alpha: float, dst: Tensor_fp64, axis: int) -> None: ...

def softmax_inplace_async_bf16(maxsumexp: Tensor_bf16, alpha: float, dst: Tensor_bf16, axis: int) -> None: ...
def softmax_inplace_async_fp32(maxsumexp: Tensor_fp32, alpha: float, dst: Tensor_fp32, axis: int) -> None: ...
def softmax_inplace_async_fp32_fast_tf32(maxsumexp: Tensor_fp32_fast_tf32, alpha: float, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def softmax_inplace_async_fp64(maxsumexp: Tensor_fp64, alpha: float, dst: Tensor_fp64, axis: int) -> None: ...
def softmax_inplace_bf16(maxsumexp: Tensor_bf16, alpha: float, dst: Tensor_bf16, axis: int) -> None: ...
def softmax_inplace_fp32(maxsumexp: Tensor_fp32, alpha: float, dst: Tensor_fp32, axis: int) -> None: ...
def softmax_inplace_fp32_fast_tf32(maxsumexp: Tensor_fp32_fast_tf32, alpha: float, dst: Tensor_fp32_fast_tf32, axis: int) -> None: ...
def softmax_inplace_fp64(maxsumexp: Tensor_fp64, alpha: float, dst: Tensor_fp64, axis: int) -> None: ...

def sqrt_async_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def sqrt_async_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def sqrt_fp32(src: Tensor_fp32, dst: Tensor_fp32) -> None: ...
def sqrt_fp64(src: Tensor_fp64, dst: Tensor_fp64) -> None: ...
def sqrt_inplace_async_fp32(A: Tensor_fp32) -> None: ...
def sqrt_inplace_async_fp64(A: Tensor_fp64) -> None: ...
def sqrt_inplace_fp32(A: Tensor_fp32) -> None: ...
def sqrt_inplace_fp64(A: Tensor_fp64) -> None: ...

def subtract_indexed_outputs_async_bf16(val: float, labels: Tensor_int64, dst: Tensor_bf16) -> None: ...
def subtract_indexed_outputs_async_fp32(val: float, labels: Tensor_int64, dst: Tensor_fp32) -> None: ...
def subtract_indexed_outputs_async_fp32_fast_tf32(val: float, labels: Tensor_int64, dst: Tensor_fp32_fast_tf32) -> None: ...
def subtract_indexed_outputs_async_fp64(val: float, labels: Tensor_int64, dst: Tensor_fp64) -> None: ...
def subtract_indexed_outputs_bf16(val: float, labels: Tensor_int64, dst: Tensor_bf16) -> None: ...
def subtract_indexed_outputs_fp32(val: float, labels: Tensor_int64, dst: Tensor_fp32) -> None: ...
def subtract_indexed_outputs_fp32_fast_tf32(val: float, labels: Tensor_int64, dst: Tensor_fp32_fast_tf32) -> None: ...
def subtract_indexed_outputs_fp64(val: float, labels: Tensor_int64, dst: Tensor_fp64) -> None: ...

def sum_fiber_async_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, batch_ndim: int, redux: int) -> None: ...
def sum_fiber_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, batch_ndim: int, redux: int) -> None: ...
def sum_fiber_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, batch_ndim: int, redux: int) -> None: ...
def sum_fiber_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, batch_ndim: int, redux: int) -> None: ...
def sum_fiber_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, batch_ndim: int, redux: int) -> None: ...
def sum_fiber_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, batch_ndim: int, redux: int) -> None: ...
def sum_fiber_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, batch_ndim: int, redux: int) -> None: ...
def sum_fiber_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, batch_ndim: int, redux: int) -> None: ...

def sum_slice_async_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def sum_slice_async_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def sum_slice_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def sum_slice_async_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...
def sum_slice_bf16(alpha: float, src: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def sum_slice_fp32(alpha: float, src: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def sum_slice_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def sum_slice_fp64(alpha: float, src: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...

def sumnorm_async_fp32(src: Tensor_fp32, dst: Tensor_fp32, axis: int) -> None: ...
def sumnorm_async_fp64(src: Tensor_fp64, dst: Tensor_fp64, axis: int) -> None: ...
def sumnorm_fp32(src: Tensor_fp32, dst: Tensor_fp32, axis: int) -> None: ...
def sumnorm_fp64(src: Tensor_fp64, dst: Tensor_fp64, axis: int) -> None: ...

def sumprod_fiber_async_bf16(alpha: float, src1: Tensor_bf16, src2: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def sumprod_fiber_async_fp32(alpha: float, src1: Tensor_fp32, src2: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def sumprod_fiber_async_fp32_fast_tf32(alpha: float, src1: Tensor_fp32_fast_tf32, src2: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def sumprod_fiber_async_fp64(alpha: float, src1: Tensor_fp64, src2: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...
def sumprod_fiber_bf16(alpha: float, src1: Tensor_bf16, src2: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def sumprod_fiber_fp32(alpha: float, src1: Tensor_fp32, src2: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def sumprod_fiber_fp32_fast_tf32(alpha: float, src1: Tensor_fp32_fast_tf32, src2: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def sumprod_fiber_fp64(alpha: float, src1: Tensor_fp64, src2: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...

def sumprod_slice_async_bf16(alpha: float, src1: Tensor_bf16, src2: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def sumprod_slice_async_fp32(alpha: float, src1: Tensor_fp32, src2: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def sumprod_slice_async_fp32_fast_tf32(alpha: float, src1: Tensor_fp32_fast_tf32, src2: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def sumprod_slice_async_fp64(alpha: float, src1: Tensor_fp64, src2: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...
def sumprod_slice_bf16(alpha: float, src1: Tensor_bf16, src2: Tensor_bf16, beta: float, dst: Tensor_bf16, axis: int, redux: int) -> None: ...
def sumprod_slice_fp32(alpha: float, src1: Tensor_fp32, src2: Tensor_fp32, beta: float, dst: Tensor_fp32, axis: int, redux: int) -> None: ...
def sumprod_slice_fp32_fast_tf32(alpha: float, src1: Tensor_fp32_fast_tf32, src2: Tensor_fp32_fast_tf32, beta: float, dst: Tensor_fp32_fast_tf32, axis: int, redux: int) -> None: ...
def sumprod_slice_fp64(alpha: float, src1: Tensor_fp64, src2: Tensor_fp64, beta: float, dst: Tensor_fp64, axis: int, redux: int) -> None: ...

def total_sum_accum_async_bf16(alpha: float, logsumexp: Tensor_bf16, src: Tensor_bf16, labels: Tensor_int64, val: Tensor_bf16) -> None: ...
def total_sum_accum_async_fp32(alpha: float, logsumexp: Tensor_fp32, src: Tensor_fp32, labels: Tensor_int64, val: Tensor_fp32) -> None: ...
def total_sum_accum_async_fp32_fast_tf32(alpha: float, logsumexp: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, labels: Tensor_int64, val: Tensor_fp32_fast_tf32) -> None: ...
def total_sum_accum_async_fp64(alpha: float, logsumexp: Tensor_fp64, src: Tensor_fp64, labels: Tensor_int64, val: Tensor_fp64) -> None: ...
def total_sum_accum_bf16(alpha: float, logsumexp: Tensor_bf16, src: Tensor_bf16, labels: Tensor_int64, val: Tensor_bf16) -> None: ...
def total_sum_accum_fp32(alpha: float, logsumexp: Tensor_fp32, src: Tensor_fp32, labels: Tensor_int64, val: Tensor_fp32) -> None: ...
def total_sum_accum_fp32_fast_tf32(alpha: float, logsumexp: Tensor_fp32_fast_tf32, src: Tensor_fp32_fast_tf32, labels: Tensor_int64, val: Tensor_fp32_fast_tf32) -> None: ...
def total_sum_accum_fp64(alpha: float, logsumexp: Tensor_fp64, src: Tensor_fp64, labels: Tensor_int64, val: Tensor_fp64) -> None: ...

def transpose_async_bf16(alpha: float, src: Tensor_bf16, dst: Tensor_bf16, ndim: int) -> None: ...
def transpose_async_fp32(alpha: float, src: Tensor_fp32, dst: Tensor_fp32, ndim: int) -> None: ...
def transpose_async_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, ndim: int) -> None: ...
def transpose_async_fp64(alpha: float, src: Tensor_fp64, dst: Tensor_fp64, ndim: int) -> None: ...
def transpose_bf16(alpha: float, src: Tensor_bf16, dst: Tensor_bf16, ndim: int) -> None: ...
def transpose_fp32(alpha: float, src: Tensor_fp32, dst: Tensor_fp32, ndim: int) -> None: ...
def transpose_fp32_fast_tf32(alpha: float, src: Tensor_fp32_fast_tf32, dst: Tensor_fp32_fast_tf32, ndim: int) -> None: ...
def transpose_fp64(alpha: float, src: Tensor_fp64, dst: Tensor_fp64, ndim: int) -> None: ...
