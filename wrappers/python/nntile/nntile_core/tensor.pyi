from collections.abc import Buffer
from typing import Sequence

from .tile import Tile, TileTraits

class TensorTraits:
    """Integer arithmetics for tensors."""

    def __init__(self, shape: Sequence[int], basetile_shape: Sequence[int]):
        ...

    def __repr__(self) -> str: ...

    @property
    def basetile_shape(self) -> tuple[int, ...]: ...

    @property
    def grid(self) -> TileTraits: ...

    def get_tile_shape(self) -> tuple[int, ...]: ...
    def get_grid_shape(self) -> tuple[int, ...]: ...


class Tensor(TensorTraits):
    """Many-dimensional tensor, presented by a set of subtensors (tiles)."""

    def __init__(self, traits: TensorTraits, distribution: Sequence[int],
                 last_tag: int): ...

    @property
    def next_tag(self) -> int: ...

    def from_array(self, array: Buffer) -> None: ...
    def to_array(self) -> Buffer: ...

    def get_tile(self, linear_offset: int) -> Tile: ...
    def invalidate_submit(self) -> None: ...
    def print_scalar_async(self) -> None: ...

    def set_reduction_add(self) -> None: ...
    def set_reduction_hypot(self) -> None: ...
    def set_reduction_maxsumexp(self) -> None: ...

    def unregister(self) -> None: ...
    def wont_use(self) -> None: ...


def tensor_from_array(tensor: Tensor, array: Buffer): ...
def tensor_to_array(tensor: Tensor, array: Buffer): ...


class Tensor_fp32(Tensor): ...


class Tensor_fp64(Tensor): ...
