from collections.abc import Buffer
from typing import Sequence

class TileTraits:
    """Integer arithmetics for tiles, that are arrays stored contiguously."""

    def __init__(self, shape: Sequence[int]): ...
    def __repr__(self) -> str: ...

    @property
    def ndim(self) -> int: ...

    @property
    def shape(self) -> tuple[int, ...]: ...

    @property
    def stride(self) -> tuple[int, ...]: ...

    @property
    def nelems(self) -> int: ...

    def linear_to_index(self, linear_offset: int) -> tuple[int, ...]: ...
    def index_to_linear(self, index: tuple[int, ...]) -> int: ...


class Tile(TileTraits):
    """Many-dimensional tensor, stored contiguously in a Fortran order."""

    def __init__(self, traits: TileTraits): ...
    def from_array(self, array: Buffer): ...
    def to_array(self, array: Buffer): ...
    def unregister(self) -> None: ...


def tile_from_array(tile: Tile, array: Buffer): ...
def tile_to_array(tile: Tile, array: Buffer): ...


class Tile_fp32(Tile): ...


class Tile_fp64(Tile): ...
