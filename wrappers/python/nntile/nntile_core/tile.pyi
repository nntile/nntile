import sys
from typing import Protocol, Sequence

if sys.version_info >= (3, 12):
    from collections.abc import Buffer
else:
    from typing_extensions import Buffer

class TileTraits:
    def __init__(self, shape: Sequence[int]) -> None: ...

    @property
    def ndim(self) -> int: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def stride(self) -> tuple[int, ...]: ...
    @property
    def nelems(self) -> int: ...

    def linear_to_index(self, linear_offset: int) -> list[int]: ...
    def index_to_linear(self, index: Sequence[int]) -> int: ...

class Tile(Protocol):
    def __init__(self, traits: TileTraits): ...
    def from_array(self, array: Buffer): ...
    def to_array(self, array: Buffer): ...
    def unregister(self) -> None: ...

def tile_from_array(tile: Tile, array: Buffer): ...
def tile_to_array(tile: Tile, array: Buffer): ...

class Tile_bf16(Tile, TileTraits): ...
class Tile_fp32(Tile, TileTraits): ...
class Tile_fp32_fast_tf32(Tile, TileTraits): ...
class Tile_fp64(Tile, TileTraits): ...
